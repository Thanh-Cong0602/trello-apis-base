import { StatusCodes } from 'http-status-codes'
import { env } from '~/config/environment'
import { JwtProvider } from '~/providers/Jwt.provider'
import ApiError from '~/utils/ApiError'

const isAuthorized = async (req, res, next) => {
  const clientAccessToken = req.cookies?.accessToken
  if (!clientAccessToken) {
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized! (token not found)'))
    return
  }

  try {
    /* B∆∞·ªõc 1: Th·ª±c hi·ªán gi·∫£i m√£ token xem c√≥ h·ª£p l·ªá hay kh√¥ng */
    const accessTokenDecoded = await JwtProvider.verifyToken(
      clientAccessToken,
      env.ACCESS_TOKEN_SECRET_SIGNATURE
    )
    /* B∆∞·ªõc 2: Quan tr·ªçng: N·∫øu nh∆∞ c√°i token h·ª£p l·ªá, c·∫ßn ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o req.jwtDecoded
    ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng ph√≠a sau */
    req.jwtDecoded = accessTokenDecoded

    /* B∆∞·ªõc 3: Cho ph√©p request ƒëi ti·∫øp */
    next()
  } catch (_error) {
    // console.log('üöÄ ~ isAuthorized ~ _error:', _error)
    /* N·∫øu accessToken n√≥ b·ªã h·∫øt h·∫°n th√¨ c·∫ßn tr·∫£ m√£ l·ªói cho ph√≠a FE bi·∫øt ƒë·ªÉ g·ªçi API refreshToken */
    if (_error?.message?.includes('jwt expired')) {
      next(new ApiError(StatusCodes.GONE, 'Need to refresh token.'))
      return
    }

    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized!'))
  }
}

export const authMiddleware = { isAuthorized }
